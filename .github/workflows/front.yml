name: CI/CD GKE App Pipeline

on:
  push:
    branches: ["main"]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: gke-stage
  GKE_ZONE: us-central1-a
  IMAGE_NAME: frontend

jobs:
  setup:
    name: Configure Google Cloud and Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
          export_default_credentials: true

      - name: Authenticate Docker to GCR
        run: gcloud auth configure-docker

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Create credentials file
        run: echo '${{ secrets.GCP_SA_KEY }}' > ./terraform/prod/account.json

      - name: Terraform Init
        working-directory: ./terraform/prod
        run: terraform init -upgrade

      - name: Terraform Apply
        working-directory: ./terraform/prod
        run: terraform apply -auto-approve -var-file="prod.tfvars"

  build-and-push:
    name: Build and Push to Google Artifact Registry
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      - name: Build Docker image
        run: |
         docker build -t us-docker.pkg.dev/cluster-producao/gcr.io/frontend:prod .

      - name: Push Docker image
        run: |
          docker push us-docker.pkg.dev/cluster-producao/gcr.io/frontend:prod

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up kubectl
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Inject timestamp to force redeploy
        run: |
          TIMESTAMP=$(date +%s)
          sed -i "s/REPLACE_ME/$TIMESTAMP/" k8s/frontend/frontend-deployment.yaml

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/frontend
      
      - name: Add Prometheus Community Helm repo
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update


      - name: Install Monitoring Stack via Helm (if not exists)
        run: |
          if ! helm status kube-prometheus-stack -n monitoring > /dev/null 2>&1; then
          helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
          -n monitoring --create-namespace \
          -f k8s/monitoring/monitoring-values.yaml
          else
            echo "Monitoring stack already installed. Skipping Helm upgrade."
          fi
  
      - name: Validate Deployment
        run: |
          kubectl rollout status deployment/frontend -n default


##teste